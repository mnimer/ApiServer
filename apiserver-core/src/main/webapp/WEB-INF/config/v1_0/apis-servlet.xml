<?xml version="1.0" encoding="UTF-8"?>
<!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Copyright (c) 2013 Mike Nimer.

  This file is part of ApiServer Project.

  The ApiServer Project is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  The ApiServer Project is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with the ApiServer Project.  If not, see <http://www.gnu.org/licenses/>.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:http="http://www.springframework.org/schema/integration/http"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!--context:annotation-config /-->
    <context:annotation-config />
    <mvc:annotation-driven>
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>image/jpeg</value>
                        <value>image/png</value>
                    </list>
                </property>
            </bean>
            <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes" value="application/json" />
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--context:component-scan base-package="apiserver.apis.v1_0.pdf.gateways.pdf" /-->


    <context:mbean-export registration="replaceExisting"/>
    <bean id="imageConfigMBean" class="apiserver.apis.v1_0.images.ImageConfigMBeanImpl"/>  <!-- todo, why isn't this auto picked up -->
    <bean id="pdfConfigMBean" class="apiserver.apis.v1_0.pdf.PdfConfigMBeanImpl"/>  <!-- todo, why isn't this auto picked up -->


    <!-- status flows -->
    <import resource="flows/status/apiserverHealth-flow.xml"/>
    <import resource="flows/status/coldFusionHealth-flow.xml"/>

    <!-- cache flows -->
    <import resource="flows/documents/documentGet-flow.xml"/>
    <import resource="flows/documents/documentAdd-flow.xml"/>
    <import resource="flows/documents/documentDelete-flow.xml"/>





    <!-- to specify swagger properties
        documentation.services.basePath=http://localhost:8080/swagger-springmvc-test
        documentation.services.version=1.0
    -->
    <context:property-placeholder location="classpath:swagger.properties" />
    <!-- pulls in the Controllers to document -->
    <context:component-scan base-package="apiserver.apis.v1_0" />

    <!-- Configuration Bean -->
    <!--bean id="documentationConfig" class="com.mangofactory.swagger.configuration.DocumentationConfig"/-->
    <!-- Custom extensibility module (bean) Has override methods to customize the document generation-->
    <bean id="documentationConfig" class="apiserver.core.swagger.CustomDocumentationConfig"/>
    <bean id="extensibilityModule" class="apiserver.core.swagger.SwaggerExtensibilityModule" />




    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <property name="maxUploadSize" value="10000000"/>
    </bean>




    <!-- Note: The default parameter name for favorParameter is 'format'. For instance, when this flag is true, a request for /services/employee/{id}/search?format=json will result
             in an MappingJacksonJsonView being resolved, while the Accept header can be the browser-defined text/html,application/xhtml+xml  -->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="true" />
        <property name="favorParameter" value="false" />
        <property name="defaultContentType" value="application/json" />
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="mediaTypes" >
            <map>
                <entry key="json" value="application/json" />
            </map>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="1" />
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <property name="objectMapper">
                        <bean class="apiserver.core.json.ApiObjectMapper"/>
                    </property>
                </bean>
            </list>
        </property>
    </bean>


</beans>

