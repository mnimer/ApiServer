<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:http="http://www.springframework.org/schema/integration/http"
       xmlns:si="http://www.springframework.org/schema/integration"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd

           http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd">

	<context:annotation-config />
	<mvc:annotation-driven />


    <context:mbean-export registration="replaceExisting"/>
    <bean id="imageConfigMBean" class="apiserver.apis.v1_0.images.ImageConfigMBeanImpl"/>  <!-- todo, why isn't this auto picked up -->


    <!-- status flows -->
    <import resource="flows/status/apiserverHealth-flow.xml"/>
    <import resource="flows/status/coldFusionHealth-flow.xml"/>

    <!-- image cache -->
    <import resource="flows/cache/cacheAdd-flow.xml"/>
    <import resource="flows/cache/cacheDelete-flow.xml"/>
    <import resource="flows/cache/cacheGet-flow.xml"/>


    <!-- Image -->
    <import resource="flows/image/imageMetadata-flow.xml"/>
    <import resource="flows/image/imageResize-flow.xml"/>
    <import resource="flows/image/imageRotate-flow.xml"/>
    <import resource="flows/image/imageDrawBorder-flow.xml"/>
    <import resource="flows/image/imageDrawText-flow.xml"/>
    <import resource="flows/image/imageInfo-flow.xml"/>

    <!-- image filters -->
    <import resource="flows/image-filters/filterBlur-flow.xml"/>
    <import resource="flows/image-filters/filterBoxBlur-flow.xml"/>
    <import resource="flows/image-filters/filterBump-flow.xml"/>
    <import resource="flows/image-filters/filterDespeckle-flow.xml"/>
    <import resource="flows/image-filters/filterGaussian-flow.xml"/>
    <import resource="flows/image-filters/filterGlow-flow.xml"/>
    <import resource="flows/image-filters/filterGrayScale-flow.xml"/>
    <import resource="flows/image-filters/filterLensBlur-flow.xml"/>
    <import resource="flows/image-filters/filterMask-flow.xml"/>
    <import resource="flows/image-filters/filterMaximum-flow.xml"/>
    <import resource="flows/image-filters/filterMedian-flow.xml"/>
    <import resource="flows/image-filters/filterMinimum-flow.xml"/>
    <import resource="flows/image-filters/filterMotionBlur-flow.xml"/>
    <import resource="flows/image-filters/filterOil-flow.xml"/>


    <!-- to specify swagger properties
        documentation.services.basePath=http://localhost:8080/swagger-springmvc-test
        documentation.services.version=1.0
    -->
    <context:property-placeholder location="classpath:swagger.properties" />
    <!-- pulls in the Controllers to document -->
    <context:component-scan base-package="apiserver.apis.v1_0" />
    <!-- Configuration Bean -->
    <bean id="documentationConfig" class="com.mangofactory.swagger.configuration.DocumentationConfig"/>
    <!-- Custom extensibility module (bean) Has override methods to customize the document generation-->
    <!-- bean id="extensibilityModule" class="com.mangofactory.swagger.springmvc.example.config.ExampleExtensibilityModule" /-->


    <!-- Common Beans -->
    <!--task:executor id="taskExecutor"  pool-size="100"/-->
    <si:poller id="defaultPoller"
               default="true"
               max-messages-per-poll="1"
               fixed-rate="100"/>


    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<util:list>
				<bean id="byteArrayMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
				<bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
			</util:list>
		</property>
	</bean>




	<!-- Spring MVC CONTROLLERS -->
	<bean name="statusController" class="apiserver.apis.v1_0.status.controllers.StatusController"/>


    <bean name="imageCacheController" class="apiserver.apis.v1_0.images.controllers.ImageCacheController"/>
	<bean name="imageDrawController" class="apiserver.apis.v1_0.images.controllers.ImageDrawingController"/>
	<bean name="imageInfoController" class="apiserver.apis.v1_0.images.controllers.ImageInfoController"/>
	<bean name="imageMetadataController" class="apiserver.apis.v1_0.images.controllers.ImageMetadataController"/>
	<bean name="imageManipulationController" class="apiserver.apis.v1_0.images.controllers.ImageManipulationController"/>
	<bean name="imageFiltersController" class="apiserver.apis.v1_0.images.controllers.ImageFiltersController"/>




	<!-- Note: The default parameter name for favorParameter is 'format'. For instance, when this flag is true, a request for /services/employee/{id}/search?format=json will result
			 in an MappingJacksonJsonView being resolved, while the Accept header can be the browser-defined text/html,application/xhtml+xml  -->

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="defaultContentType" value="application/json"/>
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<!--entry key="xml" value="application/xml" /-->
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"></bean>

				<!--bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg ref="marshaller"/>
				</bean-->
			</list>
		</property>
	</bean>


</beans>

