<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:ctx="http://www.springframework.org/schema/context"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:si="http://www.springframework.org/schema/integration"
	   xmlns:http="http://www.springframework.org/schema/integration/http"
	   xmlns:oxm="http://www.springframework.org/schema/oxm"
	   xmlns:p="http://www.springframework.org/schema/p"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
           http://www.springframework.org/schema/integration/http http://www.springframework.org/schema/integration/http/spring-integration-http.xsd
           http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd">

	<context:annotation-config />


	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<util:list>
				<bean id="byteArrayMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
			</util:list>
		</property>
	</bean>


	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--property name="maxUploadSize" value="10000000"/-->
	</bean>
	<!--bean id="multipartResolver"
		  class="org.springframework.web.multipart.support.StandardServletMultipartResolver">
	</bean-->


	<import resource="_status-esb.xml" />
	<import resource="_images-esb.xml" />



	<bean id="httpChannelInvoker" class="apiserver.apis.v1_0.common.HttpChannelInvoker"/>


	<!-- MBeans -->
	<bean id="imageConfigMBean" class="apiserver.apis.v1_0.images.ImageConfigMBean"/>


	<!-- Spring MVC CONTROLLERS -->
	<bean name="statusController" class="apiserver.apis.v1_0.status.controllers.StatusController"/>
	<bean name="captchaController" class="apiserver.apis.v1_0.images.controllers.CaptchaController"/>
	<bean name="imageCacheController" class="apiserver.apis.v1_0.images.controllers.ImageCacheController"/>
	<bean name="imageDrawController" class="apiserver.apis.v1_0.images.controllers.ImageDrawingController"/>
	<bean name="imageInfoController" class="apiserver.apis.v1_0.images.controllers.ImageInfoController"/>
	<bean name="imageManipulationController" class="apiserver.apis.v1_0.images.controllers.ImageManipulationController"/>



	<!-- handler mapping implementation that is aware of inbound Spring Integration
			http inbound gateway's and inbound adapter's with "path" attributes -->
	<!--bean class="org.springframework.integration.http.inbound.UriPathHandlerMapping"/-->


	<!-- NOTE: it would be nice to use this, but there is a problem(s).
		1. with initial testing, every other request (reload in browser) times out
	-->
	<!--http:inbound-gateway id="inboundEmployeeSearchRequestGateway"
							  supported-methods="GET"
							  request-channel="pingInputChannel"
							  reply-channel="pingOutputChannel"
							  mapped-response-headers="Return-Status, Return-Status-Msg, HTTP_RESPONSE_HEADERS"
							  view-name="/index"
							  path="/v1-0/health*"
							  reply-timeout="10000">

	</http:inbound-gateway-->




	<!-- Note: The default parameter name for favorParameter is 'format'. For instance, when this flag is true, a request for /services/employee/{id}/search?format=json will result
			 in an MappingJacksonJsonView being resolved, while the Accept header can be the browser-defined text/html,application/xhtml+xml  -->

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="defaultContentType" value="application/json"/>
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<!--entry key="xml" value="application/xml" /-->
			</map>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"></bean>

				<!--bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg ref="marshaller"/>
				</bean-->
			</list>
		</property>
	</bean>


	<!-- Define the view resolver to use jsp files within the jsp folder -->
	<bean name="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>


	<bean id="unitTestProperties" class="org.springframework.beans.factory.config.MapFactoryBean">
		<property name="targetMapClass">
			<value>java.util.HashMap</value>
		</property>
		<property name="sourceMap">
			<map>
				<entry key="tomcatHost" value="127.0.0.1" />
				<entry key="tomcatPort" value="8080" />
				<entry key="tomcatContextRoot" value="/apiserver-core" />
			</map>
		</property>
	</bean>

</beans>

